Aula 2 - JavaScript (Resumo incorporado, + conceitos extras) 

	Como funciona um Computador
		
		Um computador √© composto por v√°rios componentes que trabalham juntos para processar informa√ß√µes e executar tarefas. Os principais componentes de um computador incluem:
	
			SSD/HD
				Disco R√≠gido (HD): 
					√â o armazenamento de longo prazo do computador que armazena dados e ficheiros de maneira permanente.
				Disco Rigido Estado S√≥lido (SSD): 
				√â uma alternativa ao HD, que armazena informa√ß√µes na mem√≥ria flash, o que o torna mais r√°pido e eficiente do que o HD.
			RAM
				Mem√≥ria RAM: 
					√â a mem√≥ria de curto prazo do computador. 
					Ela armazena as informa√ß√µes que o processador est√° usando para executar tarefas e programas.
			CPU
				Processador (CPU): 
					√â o ‚Äúc√©rebro‚Äù do computador que executa as instru√ß√µes do software. 
					O processador processa informa√ß√µes atrav√©s da manipula√ß√£o de bits bin√°rios em suas portas l√≥gicas.					
			GPU
				Unidade de Processamento Gr√°fico (GPU):
					√â um chip que ajuda o processador a processar gr√°ficos e anima√ß√µes mais rapidamente.
			Placa-M√£e	
				√â o componente que conecta todos os componentes do computador. Ela √© respons√°vel pela conex√£o do processador, da mem√≥ria RAM e da GPU, perifericos e alimenta√ß√£o.
			
		Quando voc√™ usa um computador, todos os componentes trabalham juntos para processar as informa√ß√µes e executar tarefas.		

	Como funciona a Web		
		A web √© uma rede global de servidores e clientes que usam protocols de rede padronizados para compartilhar informa√ß√µes por meio de aplicativos e servi√ßos que funcionam na web.
	
		Server-Client
			O principal protocolo de rede utilizado na web √© o HTTP, que permite que clientes e servidores comuniquem-se de maneira eficaz.
			A intera√ß√£o entre clientes e servidores na web √© organizada em uma estrutura cliente-servidor.
			Isso significa que os clientes enviam pedidos aos servidores, e os servidores respondem com informa√ß√µes ou dados.
			Exemplo:
				Quando voc√™ digita um endere√ßo de site em um navegador, o cliente envia uma solicita√ß√£o HTTP ao servidor do site.
					O servidor ent√£o responde com a p√°gina do site solicitada.
						Nesse processo, o cliente e o servidor comunicam-se atrav√©s de protocolos de rede padronizados como HTTP.
	
		P2P
			O modelo de intera√ß√£o web P2P (Peer-to-Peer), permite que os clientes compartilhem informa√ß√µes diretamente com outros clientes, em vez de dependerem exclusivamente de servidores centrais. 
			Esse modelo pode ser usado para compartilhar arquivos, v√≠deos, √°udio e outros recursos na web.
			
	Ambiente JavaScript
		JavaScript √© uma linguagem de programa√ß√£o de alto n√≠vel, projetada para ser usada no lado do cliente, geralmente em navegadores e aplicativos de web.
		Ela √© projetada para ser simples de aprender e usar, e fornece uma variedade de recursos para construir aplicativos interativos na web.
	
			NPM
				NPM (Node Package Manager) √© uma plataforma de gerenciamento de pacotes para a linguagem Node.js, que √© um ambiente de execu√ß√£o de JavaScript no lado do servidor.
				Ele fornece um sistema de gerenciamento e distribui√ß√£o de pacotes para aplicativos Node.js, permitindo que desenvolvedores dividam seu c√≥digo em pacotes menores e reutiliz√°veis.
		
			Node.js
				Node.js √© um ambiente de execu√ß√£o de JavaScript no lado do servidor, que √© projetado para permitir que desenvolvedores escrevam aplicativos de servidor-cliente apenas em JavaScript.
				Isso significa que, em vez de usar linguagens de programa√ß√£o adicionais como C++ ou Java para construir servidores, desenvolvedores podem usar JavaScript para tanto o lado do cliente quanto do servidor.
					Link Node.js
						https://nodejs.org/en	
			
			npm, package.json
				npm" √© uma ferramenta de gerenciamento de pacotes JavaScript, que √© usada para controlar as depend√™ncias de um projeto.
				O pacote principal de um projeto √© armazenado em um arquivo chamado "package.json", que cont√©m informa√ß√£o sobre o pacote principal e suas depend√™ncias.
				Os pacotes em um projeto podem ser organizados em hierarquias de depend√™ncias, em que cada pacote depende de um ou mais pacotes pai em sua hierarquia.
				Quando um pacote depende de outro, o processo de gerenciamento de pacotes usa o "npm" para baixar autom√°ticamente os pacotes necess√°rios para o pacote dependente.
			
			Frameworks
				Frameworks s√£o estruturas de c√≥digo que fornecem uma estrutura pr√©-fabricada para criar aplicativos de forma mais r√°pida e f√°cil.
				Ele fornece uma camada de abstra√ß√£o entre a funcionalidade b√°sica do JavaScript e o c√≥digo de aplicativo real.
				Alguns dos principais frameworks JavaScript incluem React, Angular e Vue.js, que ajudam os desenvolvedores a criar aplica√ß√µes de forma mais eficiente e mais r√°pida.
				Esses frameworks fornecem um conjunto de bibliotecas e recursos para ajudar os desenvolvedores a lidar com tarefas comuns, como manipula√ß√£o da p√°gina, gerenciamento de estados, conectividade da web, entre outros.
					Link Frameworks:
						https://www.npmjs.com/package/express
						
	Projeto de Transferir arquivos por Wifi
	
		Mostrar HTML
		
			Exemplo de pagina simpes de HTML (Contador)(executar em Visual Studio Code)
				
				<!DOCTYPE html>
						<html lang="pt">
						<head>
						<meta charset="UTF-8">
						<meta name="viewport" content="width=device-width, initial-scale=1.0">
						<title>Minha P√°gina com Contador</title>
						<style>
							body {
								font-family: Arial, sans-serif;
								margin: 40px;
								background-color: #f0f0f0;
							}
							h1 {
								color: #333;
								text-align: center;
							}
							.container {
								max-width: 800px;
								margin: auto;
								background-color: #fff;
								padding: 20px;
								box-shadow: 0 0 10px rgba(0,0,0,0.1);
							}
							button {
								display: block;
								margin: 20px auto;
								padding: 10px 20px;
								font-size: 16px;
								cursor: pointer;
							}
						</style>
						</head>
						<body>

						<div class="container">
							<h1>Contador com JavaScript</h1>
							<p id="contador">Contagem: 0</p>
							<button id="botaoContador">Clique aqui!</button>
						</div>

						<script>
							// Seleciona o elemento do par√°grafo e o bot√£o
							const contador = document.getElementById("contador");
							const botaoContador = document.getElementById("botaoContador");
							
							let contagem = 0; // Inicializa a vari√°vel contagem

							// Adiciona um ouvinte de eventos para "click" no bot√£o
							botaoContador.addEventListener("click", function() {
								contagem += 30; // Incrementa a contagem
								contador.textContent = "Contagem: " + contagem; // Atualiza o texto do par√°grafo com a nova contagem
							});
						</script>

						</body>
						</html>
					
			Exemplo de pagina simpes em HTML (Mensagem, edit: "h1" e "p")(executar em Visual Studio Code)
					
				<script> //Criando uma pagina web simples </script>
				<!DOCTYPE html> 
				<html lang="pt">
				<head>
					

					<meta charset="UTF-8"> 
					<meta name="viewport" content="width=device-width, initial-scale=1.0">
					<title>Minha P√°gina com Contador</title>
						<style>
							body {
								font-family: Arial, sans-serif;
								margin: 40px;
								background-color: #f0f0f0;
							}
							h1 {
								color: #333;
								text-align: center;
							}
							.container {
								max-width: 800px;
								margin: auto;
								background-color: #fff;
								padding: 20px;
								box-shadow: 0 0 10px rgba(0,0,0,0.1);
											}
							button {
								display: block;
								margin: 20px auto;
								padding: 10px 20px;
								font-size: 16px;
								cursor: pointer;
											}
						</style>
						</head>
						<body>

							<div class="container"> 
											
								<h1>Ol√° Paulo Lunardi!</h1>
								<p> Esta √© uma pagina simples HTML com CSS incorporado., Voce pode usar este exemplo como
								ponto de partida para criar suas pr√≥prias p√°ginas web. Sinta-se livre para modificar o HTML e o class
								conforme necess√°rio para atender as suas necessidades. Aproveite para explorar mais sobre desenvolvimento web e se dibvertir criando!
								</p>
										
							</div>

							</body>
							</html>					
				
			Exemplo de pagina simpes em HTML (seleciona um arquivo, carrega e envia)(executar em Visual Studio Code)
					Link Imagem utilizada na aula:
						https://github.com/nrxschool/bootcamp-optimism/blob/main/week1/day2/uploads/foto-bitcoin.jpg
				
				<!DOCTYPE html>
				<html>

				<head>
					<title>‚¨ÜÔ∏è Uploader</title>
				</head>

				<body>
					<h2>Upload de Arquivo</h2>

					<!-- FORMS -->
					<form id="uploadForm" enctype="multipart/form-data">
						<input type="file" name="arquivo" required>
						<button type="button" onclick="uploadFile()">Enviar Arquivo</button>
					</form>

					<!-- PROGRESS BAR -->
					<div>
						<progress id="uploadProgress" value="0" max="100" style="width:100%;"></progress>
					</div>

					<!-- UPLOADER JAVASCRIPT -->
					<script>
						function uploadFile() {
							var form = document.getElementById('uploadForm');
							var formData = new FormData(form);
							var xhr = new XMLHttpRequest();

							// Configura a barra de progresso
							var progress = document.getElementById('uploadProgress');
							xhr.upload.onprogress = function (e) {
								if (e.lengthComputable) {
									var percentComplete = (e.loaded / e.total) * 100;
									progress.value = percentComplete;
								}
							};

							xhr.onload = function () {
								if (xhr.status == 200) {
									alert("‚úÖ Upload completo!");
									progress.value = 0;
								} else {
									alert("üö® Erro no upload: " + xhr.status);
								}
							};

							xhr.open('POST', '/upload', true);
							xhr.send(formData);
						}
					</script>
				</body>

				</html>
				
				
		Mostrar JavaScript
			Fun√ß√µes que carrega um ou 
			
				const express = require('express');
				const multer = require('multer');
				const app = express();
				const port = 3001;
				const os = require('os');

				function getLocalIpAddress() {
					const interfaces = os.networkInterfaces();
					for (const iface of Object.values(interfaces)) {
						for (const alias of iface) {
							if (alias.family === 'IPv4' && !alias.internal) {
								return alias.address;
							}
						}
					}
					return '0.0.0.0';
				}

				const upload = multer({ dest: 'uploads/' });


				const page = express.static('public')
				app.use(page);

				app.get('/', (req, res) => {
					res.sendFile(__dirname + '/index.html');
				});


				app.post('/upload', upload.single('arquivo'), (req, res) => {
					console.log(req.file);
					res.send('Arquivo recebido!');
				});

				app.listen(port, () => {
					console.log(`Servidor rodando em http://${getLocalIpAddress()}:${port}`);
				});
				
					// esclarecimentos de algumas func√µes e vari√°veis:
	
						const express = require('express');
							O arquivo "express.js" √© um framework popular para construir aplicativos da Web utilizando Node.js. 
							Ele permite que desenvolvedores criem aplica√ß√µes web de forma simples e r√°pida.
			
						const multer = require('multer');
							O pacote "multer" permite que desenvolvedores fa√ßam upload de arquivos em seus aplicativos web. 
							Ele fornece uma interface simples para o upload de arquivos.
							
						const app = express();
							A vari√°vel "app" √© uma inst√¢ncia de um objeto express que √© usado para construir o servidor em Node.js.
							
						const port = 3001
							A vari√°vel "port" define a porta na qual o servidor se listenar√°.
							
						const os = require('os');
							O pacote "os" √© usado para acessar informa√ß√µes sobre o sistema operacional em que o aplicativo est√° rodando.
							Aqui, ele √© usado para obter o endere√ßo IP do computador no qual o servidor est√° rodando.
							
						function getLocalIpAddress()
							A fun√ß√£o "getLocalIpAddress" √© usada para obter o endere√ßo IP do computador no qual o servidor est√° rodando.
							Ela usa as fun√ß√µes fornecidas pelo pacote "os" para listar todas as redes dispon√≠veis e retorna o endere√ßo IP correspondente.
							
						const upload = multer({ dest: 'uploads/', limits: { fileSize: 5 * 1024 * 1024 } });
							A vari√°vel "upload" √© uma inst√¢ncia do objeto "multer" que √© usado para processar o upload de arquivos na aplica√ß√£o. 
							A propriedade "dest" especifica o destino dos arquivos que ser√£o enviados pelo cliente para o servidor.
							A propriedade "limits" define um limite de tamanho para os arquivos que podem ser enviados pelo cliente.
							
						const page = express.static('public')
							A vari√°vel "page" √© uma inst√¢ncia de um objeto "express" que √© usado para usar um diret√≥rio espec√≠fico como pasta est√°tica. 
							No caso, a pasta "public" √© usada.
