Aula 3 - Blockchain B√°sico.

	Criptografia
	
		Hash Functions
		
			Hash √© uma fun√ß√£o que transforma um valor de entrada de tamanho arbitr√°rio em um valor de sa√≠da de tamanho fixo, geralmente um inteiro. 
			As fun√ß√µes de hash s√£o usadas em v√°rios campos, como ci√™ncia da computa√ß√£o, criptografia e bancos de dados.

			Em bancos de dados, fun√ß√µes de hash s√£o usadas para hashar valores de coluna e us√°-los como chaves para acesso e retra√ß√£o de dados. 
				Isso permite uma retra√ß√£o de dados pi√π eficiente. 
				
			Em criptografia, fun√ß√µes de hash s√£o usadas para gerar hash criptogr√°ficos, que s√£o usados para verificar a integridade de dados.

			Fun√ß√µes de hash tamb√©m s√£o usadas em programa√ß√£o e outros campos, como tabelas de hash e √°rvores de hash, para estrutura√ß√£o e recupera√ß√£o de dados eficientes.
			
			Elas tamb√©m s√£o usadas em algoritmos de hash como SHA-256 e MD5, que s√£o usados para assinaturas digitais, autentica√ß√£o de mensagem e integridade de dados.
		
				RIPEMD-160
				
					√â uma fun√ß√£o de hash criptogr√°fica que transforma uma mensagem de qualquer tamanho em uma chave de 160 bits.
					Esta fun√ß√£o √© um algoritmo de hash de mensagens, cujo objetivo √© resumir a mensagem em uma chave de tamanho fixo, o que √© √∫til em diversos contextos de seguran√ßa e criptografia.
					Tamb√©m √© amplamente utilizado em sistemas de seguran√ßa de informa√ß√£o, como a seguran√ßa de dados e criptografia.
				
						Pro: Bom equil√≠brio entre seguran√ßa e tamanho de sa√≠da, ideal para endere√ßos de carteira de criptomoedas.
						Contra: Menos seguro que algoritmos de hash mais recentes e de maior tamanho, como o SHA-256.
					
				SHA256
				
					SHA256 √© uma fun√ß√£o de hash criptogr√°fica que transforma uma mensagem de qualquer tamanho em uma chave de 256 bits. 
					Este algoritmo √© usado em diversos contextos criptogr√°ficos, como autentica√ß√£o e verifica√ß√£o de integridades de dados.
					√â amplamente utilizado em sistemas de seguran√ßa de informa√ß√£o, como seguran√ßa de dados, criptografia, autentica√ß√£o e verifica√ß√£o de integrididades de dados. 
				
						Pro: Alta seguran√ßa, resistente a colis√µes e pr√©-imagens, sendo fundamental para a seguran√ßa de blockchain e Bitcoin.
						Contra: Sa√≠das relativamente grandes e potencialmente mais lento que algoritmos mais novos e eficientes.
					
				Keccak256 (SHA-3_256)
				
					√â uma fun√ß√£o de hash criptogr√°fica que transforma uma mensagem de qualquer tamanho em uma chave de 256 bits. 
					Isto permite um resumo confi√°vel e seguro de uma mensagem.
					Foi selecionada como a terceira fun√ß√£o de hash doSHA3-256 e foi escolhido pelos seus desenvolvedores como o padr√£o SHA-3 de 2015.
				
						Pro: Resistente contra ataques de criptografia qu√¢ntica, oferecendo seguran√ßa em um contexto p√≥s-qu√¢ntico.
						Contra: Maior complexidade de implementa√ß√£o devido √† sua estrutura √∫nica e novidade.
					
				BLAKE2b
				
					BLAKE2b (Berry-Levin Auto-Cryptographic Hash) √© uma fun√ß√£o de hash criptogr√°fica que permite a gera√ß√£o de uma chave de 64 bits, a partir de uma mensagem de qualquer tamanho.			
					Tem um grande n√∫mero de varia√ß√µes, incluindo BLAKE2s, BLAKE2b, e BLAKE2x.
					Cada vers√£o oferece um equil√≠brio √∫nico de seguran√ßa, seguran√ßa e efici√™ncia em termos de mem√≥ria, e √© usado em sistemas criptogr√°ficos e de autentica√ß√£o.
								
						Pro: Superior em velocidade e efici√™ncia comparado ao SHA-256, ideal para aplica√ß√µes que necessitam de alta performance.
						Contra: N√£o t√£o amplamente reconhecido ou adotado como padr√£o quanto o SHA-256, limitando seu uso em alguns contextos.
					
				SHAKE128 (Variante do SHA-3 com sa√≠da extens√≠vel)
				
					SHAKE128 √© uma fun√ß√£o de hash criptogr√°fica que permite a gera√ß√£o de uma chave de 128 bits, a partir de uma mensagem de qualquer tamanho.
					√â projetado para ser seguro contra a maioria dos ataques de hash, e √© amplamente utilizado em sistemas criptogr√°ficos e de autentica√ß√£o.
					Variante do SHA-3, com a capacidade para gerar sa√≠das de diferentes tamanhos, incluindo 160, 224, 256 e 512 bits, o que a torna uma fun√ß√£o de hash vers√°til em termos de tamanho da chave e seguran√ßa.
				
						Pro: Flexibilidade no tamanho da sa√≠da permite ajustes conforme necessidade de seguran√ßa, tornando-o vers√°til.
						Contra: A sa√≠da flex√≠vel pode complicar a interoperabilidade e padroniza√ß√£o em sistemas que esperam um tamanho de hash fixo.
					
	Criptografia Assim√©trica
	
		Criptografia assim√©trica, tamb√©m conhecida como criptografia de chave p√∫blica, √© um tipo de criptografia que usa duas chaves diferentes para criptografar e decriptografar dados. 
		Uma chave √© usada para criptografar e √© mantida privada pelo remetente, enquanto a outra chave √© usada para decriptografar e √© divulgada publicamente pelo destinat√°rio.
	
		üîè Curvas El√≠pticas:

			ECDSA (secp256k1)
			
				√â o acr√¥nimo de Elliptic Curve Digital Signature Algorithm, que √© umalgoritmo de assinatura digital baseado em curvas el√≠pticas, tamb√©m conhecido como ECDSA. 
				O ECDSA √© baseado em curvas el√≠pticas que s√£o menos propensas a ataques do que curvas ovais, e sua seguran√ßa √© baseada na dificuldade de resolver problemas de fatora√ß√£o em n√∫meros primos.
				ECDSA √© amplamente utilizado em sistemas de criptografia como Bitcoin e Blockchain, onde √© usada para gerar assinaturas digitais que podem ser verificadas por outros usu√°rios da rede. 
				Em compara√ß√£o com outros algoritmos de assinatura digital, ECDSA tem a vantagem de ser mais eficiente em termos de armazenamento de dados e processamento, al√©m de ser mais segura contra ataques de fatoramento de n√∫meros primos.
			
					Pro: Amplamente adotado e testado, sendo a base da seguran√ßa para o Bitcoin, oferecendo um alto n√≠vel de confian√ßa e seguran√ßa comprovada.
					Contra: Vulner√°vel a ataques de canal lateral se n√£o implementado corretamente, al√©m de depender da qualidade da gera√ß√£o de n√∫meros aleat√≥rios para a seguran√ßa das chaves.
				
			EdDSA (curve25519)
			
				Elliptic Curve Digital Signature Algorithm √© um algoritmo de assinatura digital baseado em curvas el√≠pticas, tamb√©m conhecido como Curve25519.
				Ele √© usado para gerar assinaturas digitais em sistemas de criptografia, que permitem que uma parte demonstre para outros usu√°rios que ela √© a propriet√°ria de uma mensagem ou documento espec√≠fico.
				Tamb√©m √© uma curva el√≠ptica que √© considerada uma das curvas el√≠pticas mais seguras disponivies atualmente, pois ela √© dif√≠cil de atacar por meio de algoritmos de fatoramento de n√∫meros primos, que s√£o as principais t√©cnicas conhecidas para atacar curvas el√≠pticas.
				Dado √† sua seguran√ßa, Curve25519 √© amplamente utilizada em sistemas de criptografia, como Bitcoin e Blockchain, onde √© usada para gerar assinaturas digitais que podem ser verificadas por outros usu√°rios da rede.
			
					Pro: Alta performance e seguran√ßa, com resist√™ncia a uma gama de ataques criptogr√°ficos, incluindo ataques de canal lateral. 
						 Ideal para sistemas que requerem assinaturas digitais r√°pidas e seguras.
					Contra: Menos onipresente em termos de ado√ß√£o quando comparado ao ECDSA, o que pode limitar a interoperabilidade com sistemas mais antigos ou estabelecidos.
				
			Schnorr (ristretto25519)
			
				Algoritmo de assinatura digital que pode ser baseado na Curve25519, uma curva el√≠ptica que √© amplamente considerada como um das curvas el√≠pticas mais seguras atualmente dispon√≠veis.
				Curva ell√≠ptica baseada em Curve25519 e tem a vantagem de ser mais r√°pida e eficiente que outros algoritmos de assinatura digital, como ECDSA.
				Gera assinaturas digitais que podem ser verificadas por outros usu√°rios da rede. 
				√â o mais r√°pido e eficiente do que ECDSA, mas ainda √© muito seguro, pois √© baseado na Curve25519.
			
					Pro: Permite a agrega√ß√£o de assinaturas, o que pode melhorar significativamente a privacidade e a efici√™ncia em transa√ß√µes blockchain, al√©m de simplificar a constru√ß√£o de protocolos multiparte.
					Contra: Embora sua ado√ß√£o esteja crescendo, especialmente com a incorpora√ß√£o no Bitcoin via Taproot, ainda √© relativamente novo comparado ao ECDSA, o que pode apresentar desafios iniciais de interoperabilidade e ado√ß√£o.
				
			ZKP (Zero-Knowledge Proofs)
			
				Tamb√©m conhecido como uma prova de conhecimento zero, √© uma t√©cnica de criptografia que permite a uma parte (o provedor) demonstrar para outra parte (o verificador) que ele possui informa√ß√£o secreta sem revelar a informa√ß√£o real. 
				Na prova de conhecimento zero, o provedor √© capaz de verificar se a informa√ß√£o fornecida pelo verificador √© verdadeira, sem revelar a informa√ß√£o original ou qualquer outra informa√ß√£o secreta. 
				Esta t√©cnica √© especialmente √∫til em situa√ß√µes em que uma parte deseja provar algo para outra parte, sem revelar informa√ß√µes confidenciais, como senhas ou informa√ß√µes financeiras.
			
				Zk-SNARKs
				
					Zk-SNARKs (Zero-knowledge Succinct Non-interactive Argument of Knowledge) √© um algoritmo de criptografia que permite uma parte provar para outra parte que possui uma informa√ß√£o sem revelar a informa√ß√£o em si.
					S√£o baseados em provas de conhecimento zero (Zero-Knowledge Proof) e permitem que a parte que possui a informa√ß√£o se prove sem interagir com a outra parte.
					
						Pro: Permite a verifica√ß√£o de transa√ß√µes ou afirma√ß√µes complexas de forma privada e eficiente, sem revelar nenhuma informa√ß√£o sobre a pr√≥pria transa√ß√£o, essencial para aplica√ß√µes que demandam privacidade absoluta.
						Contra: Requer uma "cerim√¥nia de confian√ßa" para a gera√ß√£o de par√¢metros criptogr√°ficos iniciais, o que pode introduzir riscos de seguran√ßa se os par√¢metros n√£o forem gerados de maneira segura e transparente.
					
				ZK-STARKs
				
					ZK-STARK (Zero-knowledge Succinct Trivial Argument of Knowledge) √© uma melhoria de ZK-SNARKs, que permite uma parte provar para outra parte que possui uma informa√ß√£o, sem revelar a informa√ß√£o em si.
					S√£o mais eficientes que ZK-SNARKs e t√™m importantes aplica√ß√µes em contextos de privacidade e seguran√ßa de informa√ß√£o, como Blockchain e Smart Contracts.
				
						Pro: Oferece todas as vantagens dos Zk-SNARKs, mas sem a necessidade de uma cerim√¥nia de confian√ßa, al√©m de ser resistente a ataques de computadores qu√¢nticos, tornando-os mais seguros e futuramente compat√≠veis.
						Contra: As provas geradas s√£o significativamente maiores do que as dos Zk-SNARKs, o que pode impactar a efici√™ncia em termos de armazenamento e transmiss√£o de dados.
					
				PLONK
				
					PLONK, sigla para "Please, Lock up our Namespaces, Kid", √© uma t√©cnica de seguran√ßa usada em DNS (Sistema de Nomes de Dom√≠nio) que ajuda a impedir que uma entidade maliciosa redirecione o usu√°rio para um servidor diferente daquele que o usu√°rio pretendia acessar.
					O PLONK envolve um registro DNS que cont√©m a lista dos servidores que o usu√°rio considera leg√≠timos e os endere√ßos de IP correspondentes.
					Esse registro √© usado para validar os servidores, impedindo que uma entidade maliciosa redirecione o usu√°rio para um site malicioso.
					
						Pro: Simplifica a gera√ß√£o de provas zero-knowledge, permitindo a reutiliza√ß√£o de um conjunto comum de par√¢metros para m√∫ltiplas provas, o que melhora a efici√™ncia e acessibilidade das ZKPs.
						Contra: Embora mais eficiente e flex√≠vel, a complexidade t√©cnica e o entendimento necess√°rio para implementar e otimizar PLONK podem ser barreiras para alguns desenvolvedores e aplica√ß√µes.
					
				BulletProofs
				
					BulletProofs (BP) √© uma t√©cnica de prova de conhecimento zero projetada para reduzir drasticamente o tamanho de uma prova, permitindo que um usu√°rio certifique a validade de uma afirma√ß√£o sem revelar qualquer informa√ß√£o confidencial.
					BP √© especialmente √∫til em contextos de criptografia, onde privacidade e seguran√ßa s√£o concernes cruciais.
				
						Pro: N√£o requer uma cerim√¥nia de configura√ß√£o confi√°vel e √© mais eficiente em termos de tamanho de prova para certas aplica√ß√µes, comparado aos Zk-SNARKs, o que √© vantajoso para melhorar a privacidade e efici√™ncia em blockchains.
						Contra: A verifica√ß√£o das provas pode ser mais lenta do que em outros sistemas de ZKP, especialmente para provas maiores, o que pode limitar sua aplicabilidade em sistemas onde a velocidade de verifica√ß√£o √© cr√≠tica.


			Intera√ß√µes com as criptografias:
			
				const elliptic = require('elliptic');
			
				//Criar uma instancia da curva secp256k1
				const ec = new elliptic.ec('secp256k1');
				
				//Gerar uma par de chaves (chave privada e chave p√∫blica)
				const privateKey = ec.genKeyPair();
			
				//Obter a chave privada como uma string hexadecimal
				const privateKey = keyPair.getPrivate('hex');
			
				// Obter a chave p√∫blica como uma string hexagonal
				const publickey = keyPair.getPublic('hex');
				
				console.log('Chave privada:', privateKey);
				console.log('Chave privada:', publicKey);
			
				//Assinar uma mensagem com a chave privada
				const message = 'Nearx';
				const signature = keyPair.sign(message);

				//Verificar a assinatura com a chave p√∫blica correspondente
				console.log('Assinatura v√°lida?', keyPair.verify("nearX, signature));